A000001_Version ::
	metakbinfo(version) implies metakbinfo_data('Prudens SBS App v.2.1-me.actions');



A000010_Action ::
	token(_, _, _, _, W1, P1), ?in(W1, [silence, reject, accept]) implies
	action_token(W1, P1);

A000020_Conflict_Adjective ::
	token(_, _, _, _, W1, P1), ?in(W1, [incompatible, conflict, disagree]) implies
	adjective_token(W1, P1);

A000030_Conflict_Adjective ::
	token(_, _, _, _, W1, P1), ?in(W1, [compatible]),
	neg(W1, P1, _, _) implies
	adjective_token(W1, P1);

A000040_Conflict_Adjective ::
	token(_, _, _, _, W1, P1), ?in(W1, [exclusive]),
	advmod(W1, P1, mutually, _) implies
	adjective_token(W1, P1);


B000010_Mutually_Exclusive ::
	cop(W1, P1, be, _),
	adjective_token(W1, P1),
	nsubj(W1, P1, W2, P2),
	token(_, _, _, _, W2, P2),
	token(_, _, _, _, W3, P3),
	conj(W2, P2, W3, P3),
	token(_, _, nner, o, W2, P2) implies
	clause_mutually_exclusive(W2, P2, W3, P3);

B000020_Mutually_Exclusive ::
	aux(W1, P1, be, _),
	adjective_token(W1, P1),
	nsubj(W1, P1, W2, P2),
	token(_, _, _, _, W2, P2),
	token(_, _, _, _, W3, P3),
	conj(W2, P2, W3, P3),
	token(_, TAG, nner, o, W2, P2) implies
	clause_mutually_exclusive(W2, P2, W3, P3);


C000010_Prep_Be_NER ::
	cop(W1, P1, be, _),
	case(W1, P1, Prep, _),
	nsubj(W1, P1, W2, P2),
	token(_, _, ner, _, W1, P1) implies
	clause_prep_be_ner(W1, P1, W2, Prep);

C000010_Prep_Be ::
	cop(W1, P1, be, _),
	case(W1, P1, Prep, _),
	nsubj(W1, P1, W2, P2),
	token(_, _, nner, _, W1, P1) implies
	clause_prep_tobe(W1, P1, W2, Prep);

C000020_Prep_NER ::
	case(W1, P1, Prep, _),
	nmod(W2, P2, W1, P1)
	token(_, _, ner, _, W1, P1) implies
	clause_prep_ner(W1, W2, P2, Prep);

C000022_ToBe_DayOfMonth ::
	cop(W1, P1, be, _),
	token(_, _, ner, date, W1, P1),
	nmod:npmod(W1, P1, W2, P2),
	token(_, _, ner, date, W2, P2), ?in(W2, [january, february, march, april, may, june, july, august, september, october, november, december]) implies
	clause_tobe_date_complex(W1, P1, day, W2, P2, month);

C000023_ToBe_DayOfMonth ::
	cop(W1, P1, be, _),
	nsubj(W1, P1, _, _),
	token(_, _, ner, number, W1, P1),
	case(W2, P2, of, _),
	token(_, _, ner, date, W2, P2), ?in(W2, [january, february, march, april, may, june, july, august, september, october, november, december]) implies
	clause_tobe_date_complex(W1, P1, day, W2, P2, month);

C000024_ToBe_Day ::
	cop(W1, P1, be, _),
	nsubj(W1, P1, _, _),
	token(_, _, ner, date, W1, P1), ?in(W1, [monday, tuesday, wednesday, thursday, friday, saturday, sunday]) implies
	clause_tobe_date(W1, P1, day);

C000025_ToBe_Day ::
	cop(W1, P1, be, _),
	nsubj(W1, P1, _, _),
	token(_, _, ner, number, W1, P1) implies
	clause_tobe_date(W1, P1, day);

C000026_ToBe_Month ::
	cop(W1, P1, be, _),
	nsubj(W1, P1, _, _),
	token(_, _, ner, date, W1, P1), ?in(W1, [january, february, march, april, may, june, july, august, september, october, november, december]) implies
	clause_tobe_date(W1, P1, month);

C000026_ToBe_Time ::
	cop(W1, P1, be, _),
	nsubj(W1, P1, _, _),
	token(_, _, ner, time, W1, P1) implies
	clause_tobe_date(W1, P1, time);

C000030_ToBe_NER ::
	cop(W1, P1, be, _),
	nsubj(W1, P1, W2, P2),
	token(_, _, ner, _, W2, P2) implies
	clause_tobe_ner(W1, P1, W2);

C000032_ToBe_NER_Compound ::
	compound(W1, P1, W2, P2),
	token(_, _, ner, _, W2, P2) implies
	clause_tobe_ner(W1, P1, W2);

C000035_ToBe_Compound ::
	cop(W1, P1, be, _),
	nsubj(W1, P1, W2, P2),
	compound(W2, P2, W3, P3),
	token(_, TAG, nner, o, W2, P2), ?in(TAG, [nn, nns, nnp, nnps])  implies
	clause_tobe(W1, P1, W3);

C000040_ToBe ::
	cop(W1, P1, be, _),
	nsubj(W1, P1, W2, P2),
	token(_, TAG, nner, o, W2, P2), ?in(TAG, [nn, nns, nnp, nnps]) implies
	clause_tobe(W1, P1, W2);

C000050_ToBe_Verb_NER ::
	aux(W1, P1, be, _),
	nsubj(W1, P1, W2, P2),
	token(_, _, ner, _, W2, P2) implies
	clause_tobe_ner(W1, P1, W2);

C000052_ToBe_Verb_NER_Comp ::
	aux(W1, P1, be, _),
	nsubj(W1, P1, W2, P2),
	compound(W2, P2, W3, P3),
	token(_, _, ner, _, W3, P3) implies
	clause_tobe_ner(W1, P1, W3);

C000055_ToBe_Verb_Comp ::
	aux(W1, P1, be, _),
	nsubj(W1, P1, W2, P2),
	compound(W2, P2, W3, P3),
	token(_, TAG, nner, o, W2, P2), ?in(TAG, [nn, nns, nnp, nnps])  implies
	clause_tobe(W1, P1, W3);

C000060_ToBe_Verb ::
	aux(W1, P1, be, _),
	nsubj(W1, P1, W2, P2),
	token(_, TAG, nner, o, W2, P2), ?in(TAG, [nn, nns, nnp, nnps])  implies
	clause_tobe(W1, P1, W2);

C000070_Verb_Subj_NER ::
	token(_, TAG, _, _, W1, P1), ?in(TAG, [vbz, vbp]),
	nsubj(W1, P1, W2, P2),
	token(_, _, ner, _, W2, P2) implies
	clause_verb_ner(W1, P1, W2);

C000072_Verb_Subj_NER_Comp ::
	token(_, TAG, _, _, W1, P1), ?in(TAG, [vbz, vbp]),
	nsubj(W1, P1, W2, P2),
	compound(W2, P2, W3, P3),
	token(_, _, ner, _, W3, P3) implies
	clause_verb_ner(W1, P1, W2);

C000075_Verb_Comp ::
	token(_, TAG, _, _, W1, P1), ?in(TAG, [vbz, vbp]),
	nsubj(W1, P1, W2, P2),
	compound(W2, P2, W3, P3),
	token(_, TAG2, nner, o, W3, P3), ?in(TAG2, [nn, nns, nnp, nnps])  implies
	clause_verb(W1, P1, W3);

C000080_Verb ::
	token(_, TAG, _, _, W1, P1), ?in(TAG, [vbz, vbp]),
	nsubj(W1, P1, W2, P2),
	token(_, TAG2, nner, o, W2, P2), ?in(TAG2, [nn, nns, nnp, nnps])  implies
	clause_verb(W1, P1, W2);

C000090_Impe_Obj_NER ::
	token(_, TAG, _, _, W1, P1), ?in(TAG, [vb, vbz, vbp]),
	dobj(W1, P1, W2, P2),
	token(_, _, ner, _, W2, P2) implies
	clause_impe_ner(W1, P1, W2);

C000097_Impe_Silence ::
	token(_, _, _, _, silence, P1),
	dep(W2, P2, silence, P1),
	token(_, TAG, nner, o, W2, P2), ?in(TAG, [nn, nns, nnp, nnps]) implies
	clause_impe(silence, P1, W2);

C000098_Impe_Silence ::
	token(_, _, _, _, silence, P1),
	dobj(silence, P1, W2, P2),
	token(_, TAG, nner, o, W2, P2), ?in(TAG, [nn, nns, nnp, nnps]) implies
	clause_impe(silence, P1, W2);

C000100_Impe ::
	token(_, TAG, _, _, W1, P1), ?in(TAG, [vb, vbz, vbp]),
	dobj(W1, P1, W2, P2),
	token(_, TAG2, nner, o, W2, P2), ?in(TAG2, [nn, nns, nnp, nnps]) implies
	clause_impe(W1, P1, W2);

C000108_Impe_No_Obj_Silence ::
	token(_, _, _, _, silence, P1) implies
	clause_impe_noobj(silence, P1, phone);

C000110_Impe_No_Obj ::
	token(_, TAG, _, _, W1, P1), ?in(TAG, [vb, vbz, vbp]) implies
	clause_impe_noobj(W1, P1, call);

C000210_Impl_Subj ::
	token(_, jj, nner, o, W1, P1) implies
	clause_impl_subj(W1, P1, user);


C010010_Simple_NER ::
	clause_tobe_ner(W1, P1, W2) implies
	clause_simple_ner(W1, P1, W2);

C010020_Simple_NER ::
	clause_verb_ner(W1, P1, W2) implies
	clause_simple_ner(W1, P1, W2);

C010030_Simple_NER ::
	clause_impe_ner(W1, P1, W2) implies
	clause_simple_ner(W1, P1, W2);

C010040_Simple ::
	clause_tobe(W1, P1, W2) implies
	clause_simple(W1, P1, W2);

C010050_Simple ::
	clause_verb(W1, P1, W2) implies
	clause_simple(W1, P1, W2);

C010060_Simple ::
	clause_impe(W1, P1, W2) implies
	clause_simple(W1, P1, W2);

C010060_Simple_Incompl ::
	clause_impe_noobj(W1, P1, W2) implies
	clause_simple_incompl(W1, P1, W2);

C010210_Simple_Incompl ::
	clause_impl_subj(W1, P1, W2) implies
	clause_simple_incompl(W1, P1, W2);





C110010_Root_Neg ::
	root(root, 0, IW0, IP0),
	dep(IW0, IP0, W1, P1), ?in(W1, [silence, reject, accept]),
	neg(W1, P1, _, _) implies
	clause_action('-', W1, P1);

C110012_Root ::
	root(root, 0, IW0, IP0),
	dep(IW0, IP0, W1, P1), ?in(W1, [silence, reject, accept]) implies
	clause_action(_, W1, P1);

C110020_Root_Neg ::
	root(root, 0, IW0, IP0),
	dep(IW0, IP0, W1, P1),
	neg(W1, P1, _, _) implies
	clause_root('-', W1, P1);

C110022_Root ::
	root(root, 0, IW0, IP0),
	dep(IW0, IP0, W1, P1) implies
	clause_root(_, W1, P1);
	
C110030_Root_Neg ::
	root(root, 0, W1, P1), ?in(W1, [silence, reject, accept]),
	neg(W1, P1, _, _) implies
	clause_action('-', W1, P1);

C110032_Root ::
	root(root, 0, W1, P1), ?in(W1, [silence, reject, accept]) implies
	clause_action(_, W1, P1);
	
C110040_Root_Neg ::
	root(root, 0, W1, P1),
	neg(W1, P1, _, _) implies
	clause_root('-', W1, P1);

C110042_Root ::
	root(root, 0, W1, P1) implies
	clause_root(_, W1, P1);




C120010_Cond_Neg ::
	root(root, 0, IW0, IP0),
	dep(IW0, IP0, _, _),
	dep(_, _, W1, P1),
	neg(W1, P1, _, _) implies
	clause_cond('-', W1, P1);

C120012_Cond ::
	root(root, 0, IW0, IP0),
	dep(IW0, IP0, _, _),
	dep(_, _, W1, P1) implies
	clause_cond(_, W1, P1);

C120020_Cond_Neg ::
	root(root, 0, W1, P1),
	mark(W1, P1, if, _),
	neg(W1, P1, _, _) implies
	clause_cond('-', W1, P1);

C120022_Cond ::
	root(root, 0, W1, P1),
	mark(W1, P1, if, _) implies
	clause_cond(_, W1, P1);

C120030_Cond_Neg ::
	advmod(W1, P1, when, _),
	dep(W1, P1, _, _),
	neg(W1, P1, _, _) implies
	clause_cond('-', W1, P1);

C120032_Cond ::
	advmod(W1, P1, when, _),
	dep(W1, P1, _, _) implies
	clause_cond(_, W1, P1);

C120040_Cond_Neg ::
	advcl(_, _, W1, P1),
	neg(W1, P1, _, _) implies
	clause_cond('-', W1, P1);

C120042_Cond ::
	advcl(_, _, W1, P1) implies
	clause_cond(_, W1, P1);




C130010_Conj_Neg ::
	conj(W1, P1, W2, P2),
	cc(W1, P1, _, _),
	neg(W1, P1, _, _)
	clause_cond(_, W1, P1) implies
	clause_conj('-', W2, P2);

C130014_Conj ::
	conj(W1, P1, W2, P2),
	cc(W1, P1, _, _),
	clause_cond(_, W1, P1) implies
	clause_conj(_, W2, P2);

C130020_Conj_Neg ::
	conj(W1, P1, W2, P2),
	cc(W1, P1, _, _),
	neg(W1, P1, _, _)
	clause_cond(_, W2, P2) implies
	clause_conj('-', W1, P1);

C130024_Conj ::
	conj(W1, P1, W2, P2),
	cc(W1, P1, _, _),
	clause_cond(_, W2, P2) implies
	clause_conj(_, W1, P1);



S000005_Mutually_Exclusive ::
	clause_mutually_exclusive(W1, P1, W2, P2) implies
	ruleterms(conflict, 0, W1, args, next, W2);

S000010_Action_Neg ::
	clause_action('-', W1, P1) implies
	ruleterms(head, 0, '-', W1, '');

S000012_Action ::
	clause_action(_, W1, P1) implies
	ruleterms(head, 0, W1, '');

S000100_From_Be_NER_Neg ::
	clause_root('-', W1, P1),
	clause_prep_be_ner(W1, P1, W2, from) implies
	ruleterms(head, 0, '-', W2, from, args, W1);

S000102_From_Be_NER ::
	clause_root(_, W1, P1),
	clause_prep_be_ner(W1, P1, W2, from) implies
	ruleterms(head, 0, W2, from, args, W1);

S000120_At_Be_NER_Neg ::
	clause_root('-', W1, P1),
	clause_prep_be_ner(W1, P1, W2, at) implies
	ruleterms(head, 0, '-', at, args, W1);

S000122_At_Be_NER ::
	clause_root(_, W1, P1),
	clause_prep_be_ner(W1, P1, W2, at) implies
	ruleterms(head, 0, at, args, W1);

S000140_At_Be_Neg ::
	clause_root('-', W1, P1),
	clause_prep_tobe(W1, P1, W2, at) implies
	ruleterms(head, 0, '-', at, args, W1);

S000142_At_Be ::
	clause_root(_, W1, P1),
	clause_prep_tobe(W1, P1, W2, at) implies
	ruleterms(head, 0, at, args, W1);

S000200_From_NER_Neg ::
	clause_root('-', W1, P1),
	clause_prep_ner(W1, W2, P2, from) implies
	ruleterms(head, 0, '-', W2, from, args, W1);

S000202_From_NER ::
	clause_root(_, W1, P1),
	clause_prep_ner(W1, W2, P2, from) implies
	ruleterms(head, 0, W2, from, args, W1);

S000300_At_NER_Neg ::
	clause_root('-', W1, P1),
	clause_prep_ner(W1, W2, P2, at) implies
	ruleterms(head, 0, '-', at, args, W2);

S000302_At_NER ::
	clause_root(_, W1, P1),
	clause_prep_ner(W1, W2, P2, at) implies
	ruleterms(head, 0, at, args, W2);

S000400_Simple_NER_Neg ::
	clause_root('-', W1, P1),
	clause_simple_ner(W1, P1, W2) implies
	ruleterms(head, 0, '-', W1, args, W2);

S000402_Simple_NER ::
	clause_root(_, W1, P1),
	clause_simple_ner(W1, P1, W2) implies
	ruleterms(head, 0, W1, args, W2);

S000500_Simple_Neg ::
	clause_root('-', W1, P1),
	clause_simple(W1, P1, W2) implies
	ruleterms(head, 0, '-', W1, args, vph-1, next, W2, args, vph-1);

S000502_Simple ::
	clause_root(_, W1, P1),
	clause_simple(W1, P1, W2) implies
	ruleterms(head, 0, W1, args, vph-1, next, W2, args, vph-1);

S000600_Simple_Incompl_Neg ::
	clause_root('-', W1, P1),
	clause_simple_incompl(W1, P1, W2) implies
	ruleterms(head, 0, '-', W1, args, vph-1, next, W2, args, vph-1);

S000602_Simple_Incompl ::
	clause_root(_, W1, P1),
	clause_simple_incompl(W1, P1, W2) implies
	ruleterms(head, 0, W1, args, vph-1, next, W2, args, vph-1);



S100030_Date_Be_NER_Neg ::
	clause_cond('-', W1, P1),
	clause_tobe_date_complex(W1, P1, day, W2, P2, month) implies
	ruleterms(body, 1, '-', day, args, W1, next, month, args, W2);

S100032_Date_Be_NER ::
	clause_cond(_, W1, P1),
	clause_tobe_date_complex(W1, P1, day, W2, P2, month) implies
	ruleterms(body, 1, day, args, W1, next, month, args, W2);

S100050_Date_Be_NER_Neg ::
	clause_cond('-', W1, P1),
	clause_tobe_date(W1, P1, Date) implies
	ruleterms(body, 1, '-', Date, args, W1);

S100052_Date_Be_NER ::
	clause_cond(_, W1, P1),
	clause_tobe_date(W1, P1, Date) implies
	ruleterms(body, 1, Date, args, W1);

S100100_From_Be_NER_Neg ::
	clause_cond('-', W1, P1),
	clause_prep_be_ner(W1, P1, W2, from) implies
	ruleterms(body, 1, '-', W2, from, args, W1);

S100102_From_Be_NER ::
	clause_cond(_, W1, P1),
	clause_prep_be_ner(W1, P1, W2, from) implies
	ruleterms(body, 1, W2, from, args, W1);

S100120_At_Be_NER_Neg ::
	clause_cond('-', W1, P1),
	clause_prep_be_ner(W1, P1, W2, at) implies
	ruleterms(body, 1, '-', at, args, W1);

S100122_At_Be_NER ::
	clause_cond(_, W1, P1),
	clause_prep_be_ner(W1, P1, W2, at) implies
	ruleterms(body, 1, at, args, W1);

S100140_At_Be_Neg ::
	clause_cond('-', W1, P1),
	clause_prep_tobe(W1, P1, W2, at) implies
	ruleterms(body, 1, '-', at, args, W1);

S100142_At_Be ::
	clause_cond(_, W1, P1),
	clause_prep_tobe(W1, P1, W2, at) implies
	ruleterms(body, 1, at, args, W1);

S100200_From_NER_Neg ::
	clause_cond('-', W1, P1),
	clause_prep_ner(W1, W2, P2, from) implies
	ruleterms(body, 1, '-', W2, from, args, W1);

S100220_From_NER ::
	clause_cond(_, W1, P1),
	clause_prep_ner(W1, W2, P2, from) implies
	ruleterms(body, 1, W2, from, args, W1);

S100300_From_NER_Neg ::
	clause_cond('-', W1, P1),
	clause_prep_ner(W1, W2, P2, from) implies
	ruleterms(body, 1, '-', W2, from, args, W1);

S100320_From_NER ::
	clause_cond(_, W1, P1),
	clause_prep_ner(W1, W2, P2, from) implies
	ruleterms(body, 1, W2, from, args, W1);

S100400_Simple_NER_Neg ::
	clause_cond('-', W1, P1),
	clause_simple_ner(W1, P1, W2) implies
	ruleterms(body, 1, '-', W1, args, W2);

S100420_Simple_NER ::
	clause_cond(_, W1, P1),
	clause_simple_ner(W1, P1, W2) implies
	ruleterms(body, 1, W1, args, W2);

S100500_Simple_Neg ::
	clause_cond('-', W1, P1),
	clause_simple(W1, P1, W2) implies
	ruleterms(body, 1, '-', W1, args, vph-1, next, is, args, vph-1, W2);

S100520_Simple ::
	clause_cond(_, W1, P1),
	clause_simple(W1, P1, W2) implies
	ruleterms(body, 1, W1, args, vph-1, next, is, args, vph-1, W2);

S100600_Simple_Incompl_Neg ::
	clause_cond('-', W1, P1),
	clause_simple_incompl(W1, P1, W2) implies
	ruleterms(body, 1, '-', W1, args, vph-1, next, is, args, vph-1, W2);

S100620_Simple_Incompl ::
	clause_cond(_, W1, P1),
	clause_simple_incompl(W1, P1, W2) implies
	ruleterms(body, 1, W1, args, vph-1, next, is, args, vph-1, W2);



S200030_Date_Be_NER_Neg ::
	clause_conj('-', W1, P1),
	neg(W1, P1, _, _),
	clause_tobe_date_complex(W1, P1, day, W2, P2, month) implies
	ruleterms(body, 2, '-', day, args, W1, next, month, args, W2);

S200032_Date_Be_NER ::
	clause_conj(_, W1, P1),
	clause_tobe_date_complex(W1, P1, day, W2, P2, month) implies
	ruleterms(body, 2, day, args, W1, next, month, args, W2);

S200050_Date_Be_NER_Neg ::
	clause_conj('-', W1, P1),
	neg(W1, P1, _, _),
	clause_tobe_date(W1, P1, Date) implies
	ruleterms(body, 2, '-', Date, args, W1);

S200052_Date_Be_NER ::
	clause_conj(_, W1, P1),
	clause_tobe_date(W1, P1, Date) implies
	ruleterms(body, 2, Date, args, W1);

S200100_From_Be_NER_Neg ::
	clause_conj('-', W1, P1),
	neg(W1, P1, _, _),
	clause_prep_be_ner(W1, P1, W2, from) implies
	ruleterms(body, 2, '-', W2, from, args, W1);

S200102_From_Be_NER ::
	clause_conj(_, W1, P1),
	clause_prep_be_ner(W1, P1, W2, from) implies
	ruleterms(body, 2, W2, from, args, W1);

S200120_At_Be_NER_Neg ::
	clause_conj('-', W1, P1),
	neg(W1, P1, _, _),
	clause_prep_be_ner(W1, P1, W2, at) implies
	ruleterms(body, 2, '-', at, args, W1);

S200122_At_Be_NER ::
	clause_conj(_, W1, P1),
	clause_prep_be_ner(W1, P1, W2, at) implies
	ruleterms(body, 2, at, args, W1);

S200140_At_Be_Neg ::
	clause_conj('-', W1, P1),
	neg(W1, P1, _, _),
	clause_prep_tobe(W1, P1, W2, at) implies
	ruleterms(body, 2, '-', at, args, W1);

S200142_At_Be ::
	clause_conj(_, W1, P1),
	clause_prep_tobe(W1, P1, W2, at) implies
	ruleterms(body, 2, at, args, W1);

S200200_From_NER_Neg ::
	clause_conj('-', W1, P1),
	neg(W1, P1, _, _),
	clause_prep_ner(W1, W2, P2, from) implies
	ruleterms(body, 2, '-', W2, from, args, W1);

S200220_From_NER ::
	clause_conj(_, W1, P1),
	clause_prep_ner(W1, W2, P2, from) implies
	ruleterms(body, 2, W2, from, args, W1);

S200300_From_NER_Neg ::
	clause_conj('-', W1, P1),
	neg(W1, P1, _, _),
	clause_prep_ner(W1, W2, P2, from) implies
	ruleterms(body, 2, '-', W2, from, args, W1);

S200320_From_NER ::
	clause_conj(_, W1, P1),
	clause_prep_ner(W1, W2, P2, from) implies
	ruleterms(body, 2, W2, from, args, W1);

S200400_Simple_NER_Neg ::
	clause_conj('-', W1, P1),
	neg(W1, P1, _, _),
	clause_simple_ner(W1, P1, W2) implies
	ruleterms(body, 2, '-', W1, from, args, W2);

S200420_Simple_NER ::
	clause_conj(_, W1, P1),
	clause_simple_ner(W1, P1, W2) implies
	ruleterms(body, 2, W1, args, W2);

S200500_Simple_Neg ::
	clause_conj('-', W1, P1),
	neg(W1, P1, _, _),
	clause_simple(W1, P1, W2) implies
	ruleterms(body, 2, '-', W1, args, vph-1, next, is, args, vph-1, W2);

S200520_Simple ::
	clause_conj(_, W1, P1),
	clause_simple(W1, P1, W2) implies
	ruleterms(body, 2, W1, args, vph-1, next, is, args, vph-1, W2);

S200600_Simple_Incompl_Neg ::
	clause_conj('-', W1, P1),
	neg(W1, P1, _, _),
	clause_simple_incompl(W1, P1, W2) implies
	ruleterms(body, 2, '-', W1, args, vph-1, next, is, args, vph-1, W2);

S200620_Simple_Incompl ::
	clause_conj(_, W1, P1),
	clause_simple_incompl(W1, P1, W2) implies
	ruleterms(body, 2, W1, args, vph-1, next, is, args, vph-1, W2);
